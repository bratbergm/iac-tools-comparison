heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying a single instance (most recent Ubuntu) with a 
  floating ip.

parameters:
  key_name: 
    type: string
    description: Name of keypair to assign to servers
    default: manager

resources:
  private_net:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: 192.168.111.0/24
      gateway_ip: 192.168.111.1
      allocation_pools:
        - start: 192.168.111.101
          end: 192.168.111.200

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: ntnu-internal

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  ansible-master:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: ansible-master_port }
  ansible-master_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  ansible_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: ansible-master_port }

  ansible-slave1:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: ansible-slave1_port }
  ansible-slave1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  ansible-slave1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: ansible-slave1_port }

  ansible-slave2:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: ansible-slave2_port }
  ansible-slave2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  ansible-slave2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: ansible-slave2_port }

  puppet-master:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: puppet-master_port }
  
  puppet-master_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  puppet-master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: puppet-master_port }

  puppet-slave1:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: puppet-slave1 }
  
  puppet-slave1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  puppet-slave1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: puppet-slave1 }

  puppet-slave2:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: puppet-slave2_port }
  
  puppet-slave2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  puppet-slave2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: puppet-slave2_port }

  kubernetes-master:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: kubernetes-master_port }
  
  kubernetes-master_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  kubernetes-master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: kubernetes-master_port }

  kubernetes-slave1:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: kubernetes-slave1_port }
  
  kubernetes-slave1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  kubernetes-slave1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: kubernetes-slave1_port }

  kubernetes-slave2:
    type: OS::Nova::Server
    properties:
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.tiny
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: kubernetes-slave2_port }
  
  kubernetes-slave2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - { get_resource: server_security_group }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  kubernetes-slave2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: kubernetes-slave2_port }


  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443


outputs:
  ansible-master_private_ip:
    description: IP address of srv1 in private network
    value: { get_attr: [ srv1, first_address ] }
  ansibel-master_public_ip:
    description: Floating IP address of srv1 in public network
    value: { get_attr: [ srv1_floating_ip, floating_ip_address ] }
  puppet-master_private_ip:
    description: IP address of dc1 in private network
    value: { get_attr: [ dc1, first_address ] }
  puppet-master_public_ip:
    description: Floating IP address of dc1 in public network
    value: { get_attr: [ dc1_floating_ip, floating_ip_address ] }
  kubernetes_private_ip:
    description: IP address of cl1 in private network
    value: { get_attr: [ cl1, first_address ] }
  kubernetes_public_ip:
    description: Floating IP address of cl1 in public network
    value: { get_attr: [ cl1_floating_ip, floating_ip_address ] }

