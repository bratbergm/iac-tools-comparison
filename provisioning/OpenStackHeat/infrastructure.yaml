heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying a cluster with one master and two workers.

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: id_rsa

resources:
  private_net:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: 192.168.1.0/24
      gateway_ip: 192.168.1.1
      allocation_pools:
        - start: 192.168.1.101
          end: 192.168.1.200

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: ntnu-internal

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  sec_core:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security group rules for all
      name: sec_core
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 3389
          port_range_max: 3389
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 6443
          port_range_max: 6443

  master:
    type: OS::Nova::Server
    properties:
      name: master
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: master_port }
        
  master_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: master_port }

  worker1:
    type: OS::Nova::Server
    properties:
      name: worker1
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: worker1_port }
  worker1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  worker1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: worker1_port }

  worker2:
    type: OS::Nova::Server
    properties:
      name: worker2
      image: 'Ubuntu Server 20.04 LTS (Focal Fossa) amd64'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: worker2_port }
  worker2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  worker2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: worker2_port }

outputs:
  worker2_private_ip:
    description: IP address of worker2 in private network
    value: { get_attr: [ worker2, first_address ] }
  worker2_public_ip:
    description: Floating IP address of worker2 in public network
    value: { get_attr: [ worker2_floating_ip, floating_ip_address ] }
  worker1_private_ip:
    description: IP address of worker1 in private network
    value: { get_attr: [ worker1, first_address ] }
  worker1_public_ip:
    description: Floating IP address of worker1 in public network
    value: { get_attr: [ worker1_floating_ip, floating_ip_address ] }
  master_private_ip:
    description: IP address of master in private network
    value: { get_attr: [ master, first_address ] }
  master_public_ip:
    description: Floating IP address of master in public network
    value: { get_attr: [ master_floating_ip, floating_ip_address ] }
